// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/valerii-smirnov/veryfi-test-task/part_one/stats/internal/domain"
)

// MockStatsUseCase is a mock of StatsUseCase interface.
type MockStatsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStatsUseCaseMockRecorder
}

// MockStatsUseCaseMockRecorder is the mock recorder for MockStatsUseCase.
type MockStatsUseCaseMockRecorder struct {
	mock *MockStatsUseCase
}

// NewMockStatsUseCase creates a new mock instance.
func NewMockStatsUseCase(ctrl *gomock.Controller) *MockStatsUseCase {
	mock := &MockStatsUseCase{ctrl: ctrl}
	mock.recorder = &MockStatsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsUseCase) EXPECT() *MockStatsUseCaseMockRecorder {
	return m.recorder
}

// GetGeographyByPeriod mocks base method.
func (m *MockStatsUseCase) GetGeographyByPeriod(ctx context.Context, from, to time.Time) ([]domain.GeographyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeographyByPeriod", ctx, from, to)
	ret0, _ := ret[0].([]domain.GeographyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeographyByPeriod indicates an expected call of GetGeographyByPeriod.
func (mr *MockStatsUseCaseMockRecorder) GetGeographyByPeriod(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeographyByPeriod", reflect.TypeOf((*MockStatsUseCase)(nil).GetGeographyByPeriod), ctx, from, to)
}

// TotalDiscountByPeriod mocks base method.
func (m *MockStatsUseCase) TotalDiscountByPeriod(ctx context.Context, from, to time.Time) (domain.TotalDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalDiscountByPeriod", ctx, from, to)
	ret0, _ := ret[0].(domain.TotalDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalDiscountByPeriod indicates an expected call of TotalDiscountByPeriod.
func (mr *MockStatsUseCaseMockRecorder) TotalDiscountByPeriod(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalDiscountByPeriod", reflect.TypeOf((*MockStatsUseCase)(nil).TotalDiscountByPeriod), ctx, from, to)
}

// TotalTaxByPeriod mocks base method.
func (m *MockStatsUseCase) TotalTaxByPeriod(ctx context.Context, from, to time.Time) (domain.TotalTax, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalTaxByPeriod", ctx, from, to)
	ret0, _ := ret[0].(domain.TotalTax)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalTaxByPeriod indicates an expected call of TotalTaxByPeriod.
func (mr *MockStatsUseCaseMockRecorder) TotalTaxByPeriod(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalTaxByPeriod", reflect.TypeOf((*MockStatsUseCase)(nil).TotalTaxByPeriod), ctx, from, to)
}
