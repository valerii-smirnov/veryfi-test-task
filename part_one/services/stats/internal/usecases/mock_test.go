// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts.go

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/valerii-smirnov/veryfi-test-task/part_one/stats/internal/domain"
)

// MockDocumentRepository is a mock of DocumentRepository interface.
type MockDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRepositoryMockRecorder
}

// MockDocumentRepositoryMockRecorder is the mock recorder for MockDocumentRepository.
type MockDocumentRepositoryMockRecorder struct {
	mock *MockDocumentRepository
}

// NewMockDocumentRepository creates a new mock instance.
func NewMockDocumentRepository(ctrl *gomock.Controller) *MockDocumentRepository {
	mock := &MockDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRepository) EXPECT() *MockDocumentRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDocumentRepository) Get(ctx context.Context, id uint) (domain.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDocumentRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocumentRepository)(nil).Get), ctx, id)
}

// MockGeolocationRepository is a mock of GeolocationRepository interface.
type MockGeolocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGeolocationRepositoryMockRecorder
}

// MockGeolocationRepositoryMockRecorder is the mock recorder for MockGeolocationRepository.
type MockGeolocationRepositoryMockRecorder struct {
	mock *MockGeolocationRepository
}

// NewMockGeolocationRepository creates a new mock instance.
func NewMockGeolocationRepository(ctrl *gomock.Controller) *MockGeolocationRepository {
	mock := &MockGeolocationRepository{ctrl: ctrl}
	mock.recorder = &MockGeolocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeolocationRepository) EXPECT() *MockGeolocationRepositoryMockRecorder {
	return m.recorder
}

// GetLocation mocks base method.
func (m *MockGeolocationRepository) GetLocation(ctx context.Context, address string) (*domain.Geography, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", ctx, address)
	ret0, _ := ret[0].(*domain.Geography)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockGeolocationRepositoryMockRecorder) GetLocation(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockGeolocationRepository)(nil).GetLocation), ctx, address)
}

// MockReceiptRepository is a mock of ReceiptRepository interface.
type MockReceiptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptRepositoryMockRecorder
}

// MockReceiptRepositoryMockRecorder is the mock recorder for MockReceiptRepository.
type MockReceiptRepositoryMockRecorder struct {
	mock *MockReceiptRepository
}

// NewMockReceiptRepository creates a new mock instance.
func NewMockReceiptRepository(ctrl *gomock.Controller) *MockReceiptRepository {
	mock := &MockReceiptRepository{ctrl: ctrl}
	mock.recorder = &MockReceiptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptRepository) EXPECT() *MockReceiptRepositoryMockRecorder {
	return m.recorder
}

// DeleteByDocumentID mocks base method.
func (m *MockReceiptRepository) DeleteByDocumentID(ctx context.Context, documentID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByDocumentID", ctx, documentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByDocumentID indicates an expected call of DeleteByDocumentID.
func (mr *MockReceiptRepositoryMockRecorder) DeleteByDocumentID(ctx, documentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByDocumentID", reflect.TypeOf((*MockReceiptRepository)(nil).DeleteByDocumentID), ctx, documentID)
}

// GetByDocumentID mocks base method.
func (m *MockReceiptRepository) GetByDocumentID(ctx context.Context, documentID uint) (domain.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDocumentID", ctx, documentID)
	ret0, _ := ret[0].(domain.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDocumentID indicates an expected call of GetByDocumentID.
func (mr *MockReceiptRepositoryMockRecorder) GetByDocumentID(ctx, documentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDocumentID", reflect.TypeOf((*MockReceiptRepository)(nil).GetByDocumentID), ctx, documentID)
}

// Save mocks base method.
func (m *MockReceiptRepository) Save(ctx context.Context, receipt domain.Receipt) (domain.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, receipt)
	ret0, _ := ret[0].(domain.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockReceiptRepositoryMockRecorder) Save(ctx, receipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReceiptRepository)(nil).Save), ctx, receipt)
}

// MockStatsRepository is a mock of StatsRepository interface.
type MockStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepositoryMockRecorder
}

// MockStatsRepositoryMockRecorder is the mock recorder for MockStatsRepository.
type MockStatsRepositoryMockRecorder struct {
	mock *MockStatsRepository
}

// NewMockStatsRepository creates a new mock instance.
func NewMockStatsRepository(ctrl *gomock.Controller) *MockStatsRepository {
	mock := &MockStatsRepository{ctrl: ctrl}
	mock.recorder = &MockStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepository) EXPECT() *MockStatsRepositoryMockRecorder {
	return m.recorder
}

// GetGeographyByPeriod mocks base method.
func (m *MockStatsRepository) GetGeographyByPeriod(ctx context.Context, period domain.Period) ([]domain.GeographyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeographyByPeriod", ctx, period)
	ret0, _ := ret[0].([]domain.GeographyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeographyByPeriod indicates an expected call of GetGeographyByPeriod.
func (mr *MockStatsRepositoryMockRecorder) GetGeographyByPeriod(ctx, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeographyByPeriod", reflect.TypeOf((*MockStatsRepository)(nil).GetGeographyByPeriod), ctx, period)
}

// GetTotalDiscountByPeriod mocks base method.
func (m *MockStatsRepository) GetTotalDiscountByPeriod(ctx context.Context, period domain.Period) (domain.TotalDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalDiscountByPeriod", ctx, period)
	ret0, _ := ret[0].(domain.TotalDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalDiscountByPeriod indicates an expected call of GetTotalDiscountByPeriod.
func (mr *MockStatsRepositoryMockRecorder) GetTotalDiscountByPeriod(ctx, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalDiscountByPeriod", reflect.TypeOf((*MockStatsRepository)(nil).GetTotalDiscountByPeriod), ctx, period)
}

// GetTotalTaxByPeriod mocks base method.
func (m *MockStatsRepository) GetTotalTaxByPeriod(ctx context.Context, period domain.Period) (domain.TotalTax, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTaxByPeriod", ctx, period)
	ret0, _ := ret[0].(domain.TotalTax)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTaxByPeriod indicates an expected call of GetTotalTaxByPeriod.
func (mr *MockStatsRepositoryMockRecorder) GetTotalTaxByPeriod(ctx, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTaxByPeriod", reflect.TypeOf((*MockStatsRepository)(nil).GetTotalTaxByPeriod), ctx, period)
}
